
NOF_CORES = 6
NOF_ITERATIONS = 12

LAYERS_FROM = 1
LAYERS_TO = 13
LAYERS_BY = 4
NEURONS_FROM = 8
NEURONS_TO = 24
NEURONS_BY = 5
REPS_FROM = 1
REPS_TO = 1
EXPONENT_FROM = 1
EXPONENT_TO = 5
SUMMAND_FROM = 0
SUMMAND_TO = 9
SUMMAND_BY = 5
LEARNING_ALGO_FROM = 2 
LEARNING_ALGO_TO = 2
MODEL_FROM = 10
MODEL_TO = 10
MAX_ITER_FROM = 2000
MAX_ITER_TO = 2000
MAX_ITER_BY = 5000
NET_COUNT_FROM = 1
NET_COUNT_TO = 1
NET_COUNT_BY = 1
ALL_QS = "TRUE"
NOF_FOLDS_FULL = 10

SERIES = "j"

import shutil
import fileinput
import sys
import os
import stat

if not os.path.exists("../batch_files"):
    os.makedirs("../batch_files")
if not os.path.exists("../models"):
    os.makedirs("../models")
if not os.path.exists("../images"):
    os.makedirs("../images")
if not os.path.exists("../outputs"):
    os.makedirs("../outputs")
if not os.path.exists("../parameter_tests"):
    os.makedirs("../parameter_tests")
if not os.path.exists("../results"):
    os.makedirs("../results")
if not os.path.exists("../evaluation"):
    os.makedirs("../evaluation")
if not os.path.exists("../best_parameters"):
    os.makedirs("../best_parameters")

def replaceAll(file,searchExp,replaceExp):
    for line in fileinput.input(file, inplace=1):
        if searchExp in line:
            line = line.replace(searchExp,replaceExp)
        sys.stdout.write(line)

dateipfad = "../evaluation/evaluate_tests_"+SERIES+".R"
shutil.copyfile("../evaluate_tests.R",dateipfad)
replaceAll(dateipfad,"layers_from =","layers_from = "+str(LAYERS_FROM)+"#")
replaceAll(dateipfad,"layers_to =","layers_to = "+str(LAYERS_TO)+"#")
replaceAll(dateipfad,"layers_by =","layers_by = "+str(LAYERS_BY)+"#")
replaceAll(dateipfad,"neurons_from =","neurons_from = "+str(NEURONS_FROM)+"#")
replaceAll(dateipfad,"neurons_to =","neurons_to = "+str(NEURONS_TO)+"#")
replaceAll(dateipfad,"neurons_by =","neurons_by = "+str(NEURONS_BY)+"#")
replaceAll(dateipfad,"series =","series = \""+SERIES+"\"#")

dateipfad = "../batch_files/prep"
shutil.copyfile("../analyse",dateipfad)
replaceAll(dateipfad,"name=","name=prep")
replaceAll(dateipfad,"output=","output=../outputs/prep.out")
replaceAll(dateipfad,"Rscript","Rscript ../preparation_of_data.R")

dateipfad = "../batch_files/baselines"
shutil.copyfile("../analyse",dateipfad)
replaceAll(dateipfad,"name=","name=baselines")
replaceAll(dateipfad,"output=","output=../outputs/baselines.out")
replaceAll(dateipfad,"Rscript","Rscript ../baselines.R")

dateipfad = "../evaluation/summarize_series.R"
if not os.path.exists(dateipfad):
	shutil.copyfile("../summarize_series.R",dateipfad)
replaceAll(dateipfad,"sum_series = c(","sum_series = c(\""+SERIES+"\",")
replaceAll(dateipfad,"first","sum_series = c(\""+SERIES+"\")")

dateipfad = "../evaluation/split.R"
if not os.path.exists(dateipfad):
	shutil.copyfile("../split.R",dateipfad)

param_list = list()
for layer in range(LAYERS_FROM,LAYERS_TO+1,LAYERS_BY):
	for neuron in range(NEURONS_FROM,NEURONS_TO+1,NEURONS_BY):
		param_list.append([layer,neuron])	

for idx in range(0,len(param_list)):
	layer = param_list[idx][0]
	neuron = param_list[idx][1]
	my_number = str(layer)+"_"+str(neuron)+"_"+SERIES
	dateipfad = "../batch_files/parameter_test"+my_number
	shutil.copyfile("../analyse",dateipfad)
	replaceAll(dateipfad,"name=","name=p:"+my_number)
	replaceAll(dateipfad,"output=","output=../outputs/parameter_test"+my_number+".out")
	replaceAll(dateipfad,"Rscript","Rscript ../models/new_models"+my_number+".R")


dateipfad = "../batch_files/batch_all_"+SERIES
file = open(dateipfad,"w")
file.write("#!/bin/bash\n\n")
file.write("### execute with source ./file instead of just ./file\n\n")
file.write("#echo commands\n")
file.write("#set -x\n\n")
file.write("module load r\n\n")
file.write("sbatch baselines\n")
for idx in range(0,len(param_list)):
	layer = param_list[idx][0]
	neuron = param_list[idx][1]
	my_number = str(layer)+"_"+str(neuron)+"_"+SERIES
	file.write("sbatch parameter_test"+my_number+"\n")
file.close()

st = os.stat(dateipfad)
os.chmod(dateipfad, st.st_mode | stat.S_IEXEC)

for idx in range(0,len(param_list)):
	layer = param_list[idx][0]
	neuron = param_list[idx][1]
	my_number = str(layer)+"_"+str(neuron)+"_"+SERIES
	dateipfad = "../models/new_models"+my_number+".R"
	shutil.copyfile("../new_models.R",dateipfad)
	replaceAll(dateipfad,"nof_cores =","nof_cores = "+str(NOF_CORES)+"#")
        replaceAll(dateipfad,"nof_iterations =","nof_iterations = "+str(NOF_ITERATIONS)+"#")
	replaceAll(dateipfad,"my_number =","my_number = \""+my_number+"\"#")	
	replaceAll(dateipfad,"layers_from =","layers_from = "+str(layer)+"#")
	replaceAll(dateipfad,"layers_to =","layers_to = "+str(layer)+"#")
	replaceAll(dateipfad,"neurons_from =","neurons_from = "+str(neuron)+"#")
	replaceAll(dateipfad,"neurons_to =","neurons_to = "+str(neuron)+"#")
	replaceAll(dateipfad,"neurons_by =","neurons_by = "+str(NEURONS_BY)+"#")
	replaceAll(dateipfad,"reps_from =","reps_from = "+str(REPS_FROM)+"#")
	replaceAll(dateipfad,"reps_to =","reps_to = "+str(REPS_TO)+"#")
	replaceAll(dateipfad,"exponent_from =","exponent_from = "+str(EXPONENT_FROM)+"#")
	replaceAll(dateipfad,"exponent_to =","exponent_to = "+str(EXPONENT_TO)+"#")
	replaceAll(dateipfad,"summand_from =","summand_from = "+str(SUMMAND_FROM)+"#")	
	replaceAll(dateipfad,"summand_to =","summand_to = "+str(SUMMAND_TO)+"#")
	replaceAll(dateipfad,"summand_by =","summand_by = "+str(SUMMAND_BY)+"#")
	replaceAll(dateipfad,"learning_algo_from =","learning_algo_from = "+str(LEARNING_ALGO_FROM)+"#")	
	replaceAll(dateipfad,"learning_algo_to =","learning_algo_to = "+str(LEARNING_ALGO_TO)+"#")
	replaceAll(dateipfad,"model_from =","model_from = "+str(MODEL_FROM)+"#")
	replaceAll(dateipfad,"model_to =","model_to = "+str(MODEL_TO)+"#")
	replaceAll(dateipfad,"max_iter_from =","max_iter_from = "+str(MAX_ITER_FROM)+"#")
	replaceAll(dateipfad,"max_iter_to =","max_iter_to = "+str(MAX_ITER_TO)+"#")
	replaceAll(dateipfad,"max_iter_by =","max_iter_by = "+str(MAX_ITER_BY)+"#")
	replaceAll(dateipfad,"net_count_from =","net_count_from = "+str(NET_COUNT_FROM)+"#")
	replaceAll(dateipfad,"net_count_to =","net_count_to = "+str(NET_COUNT_TO)+"#")
	replaceAll(dateipfad,"net_count_by =","net_count_by = "+str(NET_COUNT_BY)+"#")
	replaceAll(dateipfad,"all_qs_value =","all_qs_value = "+ALL_QS+"#")
	replaceAll(dateipfad,"nof_folds_full =","nof_folds_full = "+str(NOF_FOLDS_FULL)+"#")



